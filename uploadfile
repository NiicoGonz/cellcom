# post
import { Router, Response } from 'express';
import { verifyToken } from '../middlewares/autentication';
import { Post } from '../models/post.model';
import { FileUpload } from '../interfaces/file-upload';
import FileSystem from '../class/file-system';

const postRoutes = Router(); 
const fileSystem = new FileSystem;


//get paged post 
postRoutes.get('/list', [verifyToken], async (req: any, res: Response) => {

    let page = Number(req.query.pagina) || 1;
    let skip = page - 1;
    skip = skip * 10;

    const post =  await Post.find()
                            .sort({_id: -1})
                            .skip( skip )
                            .limit(10)
                            .populate('user', '-password')
                            .exec();

    res.status(200).json({
        ok: true,
        page,
        post
    });

});

//Create post
postRoutes.post('/create', [verifyToken], (req: any, res: Response) => {

    const body = req.body;
    body.user = req.user._id;

    const images = fileSystem.imagesFromTempToPost( req.user._id );
    body.imgs = images;

    Post.create( body ).then( async postDB => {

        await postDB.populate('user', '-password').execPopulate();

        res.status(200).json({
            ok: true,
            post: postDB
        });

    }).catch( err => {

        res.status(400).json({
            ok: false,
            err
        });

    });

});

//Service for upload files
postRoutes.post('/upload', [verifyToken], async (req: any, res: Response) => {

    if (!req.files){
        return res.status(400).json({
            ok: false,
            message: 'No se subio ningún archivo'
        });
    }

    const file: FileUpload = req.files.image;

    if (!file){
        return res.status(400).json({
            ok: false,
            message: 'No se subio ningún archivo - image'
        });
    }

    if ( !file.mimetype.includes('image') ){
        return res.status(400).json({
            ok: false,
            message: 'Lo que subio no es una imagen'
        });
    }

    await fileSystem.saveImageTemp(file, req.user._id);

    res.status(200).json({
        ok: true,
        file: file.mimetype
    });

});

//
postRoutes.get('/imagen/:userid/:img', (req: any, res: Response) => {

    const userId = req.params.userid;
    const img = req.params.img;

    const pathPhoto = fileSystem.getPhotoUrl( userId, img );

    res.status(200).sendFile( pathPhoto );

});
export default postRoutes;

# fileSystem
import { FileUpload } from '../interfaces/file-upload';

import path from 'path';
import fs from 'fs';
import uniqid from 'uniqid';


export default class FileSystem {

    constructor(){}

    saveImageTemp (file: FileUpload, userId: string){

        return new Promise( (resolve, reject) => {
            //Create folder
            const path = this.createFoder( userId );

            //file file
            const fileName = this.generateUniqueName( file.name );

            //move the file to folder of uploads
            file.mv( `${path}/${fileName}`, (err: any) => {

                if (err){
                    reject(err);
                } else {
                    resolve();
                }

            });
        });

    }

    private generateUniqueName(originalName: string){

        const nameArr = originalName.split('.');
        const extension = nameArr[ nameArr.length - 1 ];
        const idUnique = uniqid();

        return `${idUnique}.${extension}`;

    }

    private createFoder (userId: string){

        const pathUser = path.resolve( __dirname, '../uploads', userId );
        const pathUserTemp = pathUser + '/temp';

        const exist = fs.existsSync( pathUser );

        if (!exist){
            fs.mkdirSync( pathUser );
            fs.mkdirSync( pathUserTemp );
        }

        return pathUserTemp;

    }

    imagesFromTempToPost (userId: string) {

        const pathTemp = path.resolve(  __dirname, '../uploads/', userId, 'temp' );
        const pathPost = path.resolve(  __dirname, '../uploads/', userId, 'posts' );

        if ( !fs.existsSync( pathTemp ) ) {
            return [];
        }

        if ( !fs.existsSync( pathPost ) ) {
            fs.mkdirSync( pathPost );
        }

        const imagesTemp = this.getImages( userId );

        imagesTemp.forEach( image =>{
            fs.renameSync( `${ pathTemp }/${ image }`, `${ pathPost }/${ image }` );
        });

        return imagesTemp;
    }

    private getImages (userId: string){
        const pathTemp = path.resolve(  __dirname, '../uploads/', userId, 'temp' );

        return fs.readdirSync( pathTemp ) || [];
    }

    getPhotoUrl( userId: string, img:string ){

        //path photos
        const pathPhotos = path.resolve(  __dirname, '../uploads/', userId, 'posts', img );

        //if exist image
        const exist = fs.existsSync( pathPhotos );
        if (!exist){
            return path.resolve(  __dirname, '../assets/400x250.jpg');
        }

        return pathPhotos; 

    }
}
